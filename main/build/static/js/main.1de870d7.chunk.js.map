{"version":3,"sources":["components/Icon/index.tsx","types/actionTypes.ts","action/index.ts","components/DictionaryWindow.tsx","components/TextWindow.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","reducer/index.ts","index.tsx"],"names":["AddIcon","viewBox","width","height","d","fill","SaveIcon","UpdateIcon","DictionaryIcon","props","LabelIcon","UPLOAD_NEW_DICTIONARY_DATA","UPDATE_DICTIONARY_DATA","UPDATE_TEXTS_DATA","updateDictionaryData","tableData","path","type","updateTextsData","data","DictionaryWindow","nameInput","input","state","pageSize","inputNameByShow","inputVisibleName","Column","Table","this","forEach","value","index","style","padding","position","dataSource","size","scroll","y","pagination","showSizeChanger","onChange","page","setState","title","dataIndex","render","name","r","i","onMouseEnter","focus","ref","placeholder","onBlur","e","target","onPressEnter","abbreviations","record","map","abbreviation","closable","color","onClose","preventDefault","newNames","filter","parseInt","push","className","onClick","PlusOutlined","Modal","confirm","icon","ExclamationCircleOutlined","content","okText","cancelText","onOk","splice","DeleteOutlined","Icon","component","top","left","unshift","key","label","length","Component","mapDispatchToProps","connect","ownProps","TextWindow","columns","editKey","text","textAlign","align","TextArea","Input","newText","originalData","autoSize","Fragment","marginRight","backgroundColor","saveFile","Main","dictionaryList","stringList","openKeys","selectedKeys","Header","Layout","Sider","Content","SubMenu","Menu","history","trigger","theme","lineHeight","fontSize","fontWeight","userSelect","mode","onTitleClick","Item","readXlsxFile","FileTextOutlined","readTxtFile","UploadOutlined","PlayCircleOutlined","minHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initStore","combineReducer","combineReducers","action","console","log","reducer","store1","ReactDOM","StrictMode","store","createStore","document","getElementById"],"mappings":"gWAIaA,EAAU,kBACtB,qBAAKC,QAAQ,gBAAgBC,MAAM,MAAMC,OAAO,MAAhD,SACC,sBAAMC,EAAE,wQAAwQC,KAAK,eAQ1QC,EAAW,kBACvB,sBAAKL,QAAQ,gBAAgBC,MAAM,MAAMC,OAAO,MAAhD,UACC,sBAAMC,EAAE,qMAAqMC,KAAK,YAClN,sBAAMD,EAAE,iIAAiIC,KAAK,YAC9I,sBAAMD,EAAE,sIAAsIC,KAAK,YACnJ,sBAAMD,EAAE,gIAAgIC,KAAK,gBAOlIE,EAAa,kBACzB,qBAAKN,QAAQ,gBAAiBC,MAAM,MAAMC,OAAO,MAAjD,SACC,sBAAMC,EAAE,i+CAAi+CC,KAAK,eAOn+CG,EAAiB,SAACC,GAAD,OAC7B,qBAAKR,QAAQ,gBAAgBC,MAAM,MAAMC,OAAO,MAAhD,SACC,sBAAMC,EAAE,2jCAA2jCC,KAAMI,EAAMJ,UAOpkCK,EAAY,kBACxB,qBAAKT,QAAQ,gBAAgBC,MAAM,MAAMC,OAAO,MAAhD,SACC,sBAAMC,EAAE,8sBAA8sBC,KAAK,e,8EC3ChtBM,EAA6B,6BAK7BC,EAAyB,yBAUzBC,EAAoB,oBCCpBC,EAAuB,SAACC,EAA0BC,GAA3B,MAA6C,CAC7EC,KAAML,EACNG,YACAC,SAMSE,EAAkB,SAACC,EAAqBH,GAAtB,MAAwC,CACnEC,KAAMJ,EACNM,OACAH,SCLEI,E,kDAGJ,WAAmBX,GAA+B,IAAD,8BAC/C,cAAMA,IAHAY,eAEyC,IADzCC,WACyC,EAE/C,EAAKC,MAAQ,CACXC,SAAU,GACVT,UAAW,GACXU,gBAAiB,GACjBC,iBAAkB,GAClBV,KAAM,IAPuC,E,0CAWjD,WAA8B,IAAD,OACnBW,EAAWC,IAAXD,OAER,EAAwDE,KAAKN,MAArDC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,gBAAiBC,EAAnC,EAAmCA,iBACnC,EAAkDG,KAAKpB,MAA/CM,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,KAAMF,EAAzB,EAAyBA,qBAMzB,OAJAC,EAAUe,SAAQ,SAACC,EAA4FC,GAC7GD,EAAK,IAAU,GAAKC,KAIpB,sBAAKC,MAAO,CACV/B,MAAO,OAEPgC,QAAS,SACTC,SAAU,YAJZ,UAQE,eAAC,IAAD,CAAOC,WAAYrB,EAAWsB,KAAK,QACjCC,OAAQ,CAAEC,EAAG,KACbC,WAAY,CACVhB,WACAW,SAAU,CAAC,YACXM,iBAAiB,EACjBC,SAAU,SAACC,EAAcnB,GACvB,EAAKoB,SAAS,CAAEpB,SAAWA,MAPjC,UAYE,cAACG,EAAD,CAAQkB,MAAM,eAAKC,UAAU,OAAkB5C,MAAM,MACnD6C,OACE,SAACC,EAAcC,EAAYC,GACzB,OACEzB,IAAoBuB,EAClB,qBAAKG,aACH,WACE,EAAKP,SAAS,CAAEnB,gBAAiBuB,IAAQ,WACvC,EAAK3B,UAAU+B,YAHrB,SAOGJ,IAEH,cAAC,IAAD,CACEK,IACE,SAAC/B,GACC,EAAKD,UAAYC,GAGrBL,KAAK,OACLoB,KAAK,QACLiB,YAAaN,EACbf,MAAO,CAAE/B,MAAO,IAChBqD,OACE,SAACC,GACC,EAAKZ,SAAS,CAAEnB,gBAAiB,KAC5B+B,EAAEC,OAAO1B,QACdhB,EAAUmC,GAAV,KAAuBM,EAAEC,OAAO1B,MAChCjB,EAAqBC,EAAWC,KAIpC0C,aACE,SAACF,GACC,EAAKZ,SAAS,CAAEnB,gBAAiB,KAC3B+B,EAAEC,OAAe1B,QACvBhB,EAAUmC,GAAV,KAAwBM,EAAEC,OAAe1B,MACzCjB,EAAqBC,EAAWC,SAtCR,QAgDxC,cAACW,EAAD,CAAQzB,MAAM,MACZ2C,MAAM,eACNC,UAAU,gBAEVC,OACE,SAACY,EAAeC,EAKbV,GALH,OAME,qCAEIS,EAAcE,KAAI,SAACC,GAAD,OAChB,cAAC,IAAD,CAAKC,UAAQ,EAACC,MAAM,OAA0BC,QAC5C,SAACT,GACCA,EAAEU,iBACF,IAAMC,EAA0BR,EAAcS,QAAO,SAACpB,GAAD,OAAkBA,IAASc,KAChF/C,EAAUmC,GAAV,0BAAoCiB,GACpCrD,EAAqB,YAAIC,GAAYC,IALzC,SASG8C,GAT6BA,MAclC,QAAUZ,IAAMxB,GACd,cAAC,IAAD,CACE2B,IACE,SAAC/B,GACC,EAAKA,MAAQA,GAGjBL,KAAK,OACLoB,KAAK,QACLJ,MAAO,CAAE/B,MAAO,IAChBqD,OACE,SAACC,GAEC,EAAKZ,SAAS,CAAElB,iBAAkB,KAC7B8B,EAAEC,OAAO1B,QACdhB,EAAUsD,SAAST,EAAM,MAAzB,cAAoDU,KAAKd,EAAEC,OAAO1B,OAClEjB,EAAqBC,EAAWC,KAIpC0C,aACE,SAACF,GACC,EAAKZ,SAAS,CAAElB,iBAAkB,KAC5B8B,EAAEC,OAAe1B,QACvBhB,EAAUmC,GAAV,cAA8BoB,KAAMd,EAAEC,OAAe1B,OACrDjB,EAAqBC,EAAWC,OAQxC,QAAUkC,IAAMxB,GAChB,eAAC,IAAD,CAAK6C,UAAU,gBAAgBC,QAC7B,WACE,EAAK5B,SAAS,CAAElB,iBAAkB,QAAUwB,IAAK,WAC9C,EAAK5B,MAAc8B,YAH1B,UAOE,cAACqB,EAAA,EAAD,IAPF,oCA3DJ,iBAyEN,cAAC9C,EAAD,CAAQkB,MAAM,eAAKC,UAAU,OAC3BC,OACE,SAACC,EAAWC,EAAYC,GACtB,OACE,cAAC,IAAD,CAAQb,KAAK,QAAQpB,KAAK,UAAUuD,QAClC,WACEE,IAAMC,QAAQ,CACZ9B,MAAO,eACP+B,KAAM,cAACC,EAAA,EAAD,IACNC,QAAS,oDAAc9B,EAAO,kCAC9B+B,OAAQ,eACRC,WAAY,eACZC,KAAM,WACJlE,EAAUmE,OAAOhC,EAAG,GACpBpC,EAAqB,YAAIC,GAAYC,OAK3C4D,KAAM,cAACO,EAAA,EAAD,IAfR,4BAJgC,aA2B1C,cAAC,IAAD,CAAQlE,KAAK,UAAUoB,KAAK,SAASuC,KACnC,cAACQ,EAAA,EAAD,CAAMC,UAAW/E,IACjB2B,MAAO,CACPE,SAAU,WACVmD,IAAK,IACJd,QACD,aANF,0BAYA,cAAC,IAAD,CAAQvD,KAAK,UAAUoB,KAAK,SAASuC,KACnC,cAACQ,EAAA,EAAD,CAAMC,UAAW/E,IACjB2B,MAAO,CACPE,SAAU,WACVmD,IAAK,GACLC,KAAM,KACLf,QACD,aAPF,gCAkBA,cAAC,IAAD,CAAQI,KAAM,cAACQ,EAAA,EAAD,CAAMC,UAAW9E,IAAgBU,KAAK,UAClDgB,MAAO,CACLE,SAAU,WACVmD,IAAK,GACLC,KAAM,KAERf,QACE,aAPJ,sCAYA,cAAC,IAAD,CAAQnC,KAAK,SAASpB,KAAK,UAAU2D,KAAM,cAACQ,EAAA,EAAD,CAAMC,UAAWrF,IAAawE,QACrE,WACEzD,EAAUyE,QAAQ,CAChBC,IAAK,KACLzC,KAAM,GACN0C,MAAO3E,EAAU4E,OAAS5E,EAAU,GAAV,MAAwB,GAClD4C,cAAe,KAIjB7C,EAAqB,YAAIC,GAAYC,IAEvCiB,MAAO,CACPE,SAAU,WACVmD,IAAK,GACLC,KAAM,KAfV,2C,+BAuBN,c,sBAKA,SAAiBvE,Q,GA1QY4E,aA4SzBC,EAAqB,CACzB/E,wBAGagF,eAbS,SAACvE,EAAiBwE,GACzC,IAAQ3E,EAAqBG,EAArBH,iBAER,OAAO,2BACF2E,GACA3E,KAQkCyE,EAAzBC,CAA6C1E,GC3StD4E,E,kDAEJ,WAAmBvF,GAAyB,IAAD,8BACzC,cAAMA,IAFAwF,aACmC,EAEzC,EAAK1E,MAAQ,CACX2E,QAAS,GACT/E,KAAM,CACJ,CACEsE,IAAK,IACLU,KAAM,mBACNT,MAAO,IACN,CACDD,IAAK,IACLU,KAAM,WACNT,MAAO,IACN,CACDD,IAAK,IACLU,KAAM,SACNT,MAAO,IACN,CACDD,IAAK,IACLU,KAAM,mBACNT,MAAO,IACN,CACDD,IAAK,IACLU,KAAM,mBACNT,MAAO,IACN,CACDD,IAAK,IACLU,KAAM,mBACNT,MAAO,KAGXlE,SAAU,GAEZ,EAAKyE,QAAU,CACb,CACEpD,MAAO,qBAAKZ,MAAO,CACjB/B,MAAO,OACPkG,UAAW,UAFN,0BAMPtD,UAAW,OACX2C,IAAK,OACLvF,MAAO,MAEPmG,MAAO,OACPtD,OAAQ,SAACoD,EAAcvC,EAAoD5B,GACzE,IAAQsE,EAAaC,IAAbD,SAER,OADoB,EAAK/E,MAAjB2E,UACWtC,EAAM,IACvB,8BACGuC,IAEH,cAACG,EAAD,CACEvE,MAAOoE,EACPzD,SACE,SAACc,GACC,IAAMgD,EAAUhD,EAAEC,OAAO1B,MACzB,EAAsD,EAAKtB,MAA7CgG,EAAd,EAAQtF,KAAoBH,EAA5B,EAA4BA,MAQ5BE,EARA,EAAkCA,iBACrBuF,EAAa5C,KAAI,SAAC9B,GAC7B,OAAIA,EAAK,MAAY6B,EAAM,IAAgB7B,EACpC,2BACFA,GADL,IAEEoE,KAAMK,OAGYxF,IAG1B0F,UAAQ,MAGb,CACD7D,MAAO,eACPC,UAAW,OACXC,OAAQ,SAAC2C,EAAe9B,EAAmD5B,GAAnE,OACN,eAAC,IAAM2E,SAAP,WACE,cAAC,IAAD,CAAQtE,KAAK,QAAQpB,KAAK,UAAUuD,QAClC,WACE,IAAM0B,EAAkB,EAAK3E,MAAM2E,UAAYtC,EAAM,IAAU,GAAKA,EAAM,IAC1E,EAAKhB,SAAS,CAAEsD,aAElBjE,MAAO,CAEP2E,YAAa,QAPf,SASG,EAAKrF,MAAM2E,UAAYtC,EAAM,IAAU,eAAO,iBAEjD,cAAC,IAAD,CAAQvB,KAAK,QAAQpB,KAAK,UACxB2D,KAAM,cAACQ,EAAA,EAAD,CAAMC,UAAW3E,IACvB8D,QACE,aAGAvC,MAAO,CAET2E,YAAa,QARf,0BAYA,cAAC,IAAD,CAAQvE,KAAK,QAAQpB,KAAK,UAAUuD,QAClC,WACE,MAAwC,EAAK/D,MAArCU,EAAR,EAAQA,KAAMH,EAAd,EAAcA,KAAME,EAApB,EAAoBA,gBACpBwD,IAAMC,QAAQ,CACZ9B,MAAO,eACP+B,KAAM,cAACC,EAAA,EAAD,IACNC,QAAS,qEACTC,OAAQ,eACRC,WAAY,eACZC,KAAM,WACJ/D,EAAgBC,EAAKiD,QAAO,SAACrC,EAAYmB,GAAb,OAA2BA,IAAMlB,KAAQhB,OAI3E4D,KAAM,cAACO,EAAA,EAAD,IAdR,8BAoBJjF,MAAO,MACPmG,MAAO,WAzH8B,E,0CA8H3C,WAA8B,IAAD,OACnB7E,EAAaK,KAAKN,MAAlBC,SACR,EAAwCK,KAAKpB,MAArCU,EAAR,EAAQA,KAAMH,EAAd,EAAcA,KAAME,EAApB,EAAoBA,gBAIpB,OAHAC,EAAKW,SAAQ,SAACC,EAAoDC,GAChED,EAAK,IAAU,GAAKC,KAGpB,qBAAKC,MAAO,CACV/B,MAAO,OACPC,OAAQ,QACR+B,QAAS,SACT2E,gBAAiB,UACjB1E,SAAU,YALZ,SAOE,eAAC,IAAMwE,SAAP,WAEE,cAAC,IAAD,CAAOV,QAASpE,KAAKoE,QAAS7D,WAAYjB,EAAMkB,KAAK,QACnDC,OAAQ,CAAEC,EAAG,KACbC,WAAY,CACVhB,WACAW,SAAU,CAAC,YACXM,iBAAiB,EACjBC,SAAU,SAACC,EAAcnB,GACvB,EAAKoB,SAAS,CAAEpB,SAAWA,QAIjC,cAAC,IAAD,CAAQP,KAAK,UAAUoB,KAAK,SAASuC,KACnC,cAACQ,EAAA,EAAD,CAAMC,UAAW/E,IACjB2B,MAAO,CACPE,SAAU,WACVmD,IAAK,IACJd,QACD,WACE,EAAKsC,SAAS9F,IAPlB,0BAYA,cAAC,IAAD,CAAQC,KAAK,UAAUoB,KAAK,SAASuC,KACnC,cAACQ,EAAA,EAAD,CAAMC,UAAW/E,IACjB2B,MAAO,CACPE,SAAU,WACVmD,IAAK,GACLC,KAAM,KACLf,QACD,aAPF,gCAkBA,cAAC,IAAD,CAAQI,KAAM,cAACQ,EAAA,EAAD,CAAMC,UAAW9E,IAAgBU,KAAK,UAClDgB,MAAO,CACLE,SAAU,WACVmD,IAAK,GACLC,KAAM,KAERf,QACE,aAPJ,sCAaA,cAAC,IAAD,CAAQnC,KAAK,SAASpB,KAAK,UAAU2D,KAAM,cAACQ,EAAA,EAAD,CAAMC,UAAWrF,IAAawE,QACvE,WACErD,EAAKqE,QAAQ,CACXC,IAAK,KACLU,KAAM,GACNT,MAAO,KAGT,EAAK9C,SAAS,CAAEsD,QAAS,MACzBhF,EAAgB,YAAIC,GAAOH,IAE7BiB,MAAO,CACPE,SAAU,WACVmD,IAAK,GACLC,KAAM,KAdR,6C,+BAwBR,c,sBAMA,SAAiBvE,Q,GApOM4E,aAgQnBC,EAAqB,CACzB3E,mBAGa4E,eAbS,SAACvE,EAAkBwE,GACzC,IAAQC,EAAezE,EAAfyE,WAER,OAAO,2BACFD,GACAC,KAQiCH,EAAzBC,CAA6CE,GC7PtDe,E,kDACJ,WAAmBtG,GAAmB,IAAD,8BACnC,cAAMA,IACDc,MAAQ,CACXyF,eAAgB,GAOhBC,WAAY,GAOZC,SAAU,CAAC,aACXC,aAAc,IAlBmB,E,0CAsBrC,WAA8B,IAAD,OACnBC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QACfC,EAAYC,IAAZD,QACR,EAA+D3F,KAAKN,MAA5DyF,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,WAAYC,EAApC,EAAoCA,SAAUC,EAA9C,EAA8CA,aACtCO,EAAY7F,KAAKpB,MAAjBiH,QAER,OACE,eAAC,IAAD,WACE,eAACJ,EAAD,CAAOK,QAAS,KAAMC,MAAM,QAA5B,UACE,qBAAKrD,UAAU,OAAOtC,MAAO,CAC3B/B,MAAO,OACPC,OAAQ,OAER0H,WAAY,OACZzB,UAAW,SACX0B,SAAU,OACVC,WAAY,OACZ/D,MAAO,kBACPgE,WAAY,QACXxD,QACD,WACEkD,EAAQpD,KAAK,MAZjB,kDAiBA,eAAC,IAAD,CAAMsD,MAAM,QAAQK,KAAK,SAASf,SAAUA,EAAUC,aAAcA,EAApE,UACE,cAACK,EAAD,CAA0B3E,MAAM,2BAAO+B,KAAM,cAACQ,EAAA,EAAD,CAAMC,UAAW7E,IAAoB0H,aAChF,SAAC1E,GAEC,EAAKZ,SAAS,CAAEsE,SAAUA,EAAS,KAAO1D,EAAEiC,IAAM,GAAK,CAACjC,EAAEiC,QAH9D,SAOIuB,EAAenD,KAAI,SAAC9B,EAAqCC,GAAtC,OACjB,cAAC,IAAKmG,KAAN,CAAsC3D,QACpC,WAEEkD,EAAQpD,KAAK,eACb,EAAK1B,SAAS,CAAEuE,aAAc,CAAC,aAAenF,KAC9C,EAAKoG,aAAarG,EAAM,KAL5B,SAQGA,EAAM,IARO,aAAeC,OARxB,cAqBb,cAACwF,EAAD,CAAoB3E,MAAM,2BAAO+B,KAAM,cAACyD,EAAA,EAAD,IAAsBH,aAC3D,SAAC1E,GAEC,EAAKZ,SAAS,CAAEsE,SAAUA,EAAS,KAAO1D,EAAEiC,IAAM,GAAK,CAACjC,EAAEiC,QAH9D,SAOIwB,EAAWpD,KAAI,SAAC9B,EAAqCC,GAAtC,OACb,cAAC,IAAKmG,KAAN,CAAgC3D,QAC9B,WACE,EAAK5B,SAAS,CAAEuE,aAAc,CAAC,OAASnF,KACxC0F,EAAQpD,KAAK,UACb,EAAKgE,YAAYvG,EAAM,KAJ3B,SAUGA,EAAM,IAVO,OAASC,OARlB,cAyBjB,eAAC,IAAD,CAAQuC,UAAU,cAAlB,UACE,eAAC6C,EAAD,CAAQ7C,UAAU,yBAAyBtC,MAAO,CAAEC,QAAS,EAAG2E,gBAAiB,SAAjF,UACE,cAAC,IAAD,CAAQjC,KAAM,cAAC2D,EAAA,EAAD,IAAoB/D,QAChC,aADF,sCAsBA,cAAC,IAAD,CAAQI,KAAM,cAAC2D,EAAA,EAAD,IAAoB/D,QAChC,WACEkD,EAAQpD,KAAK,WAFjB,sCAmBA,cAAC,IAAD,CAAQM,KAAM,cAAC4D,EAAA,EAAD,IAAwBhE,QACpC,aADF,mCAQF,cAAC+C,EAAD,CAAShD,UAAU,yBACjBtC,MAAO,CAGLwG,UAAW,KAJf,SAQE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOzH,KAAK,cAAcqE,UAAWjE,IACrC,cAAC,IAAD,CAAOJ,KAAK,SAASqE,UAAWW,iB,+BAS5C,c,0BAIA,SAAqBhF,M,yBAYrB,SAAoBA,Q,GAtLH4E,aAkNbC,EAAqB,CACzB/E,uBACAI,mBAGa4E,eAdS,SAACvE,EAAkBwE,GACzC,IAAQgB,EAASxF,EAATwF,KAER,OAAO,2BACFhB,GACAgB,KASiClB,EAAzBC,CAA6CiB,GClN7C2B,E,kDAxBd,WAAmBjI,GAAkB,IAAD,8BACnC,cAAMA,IACDc,MAAQ,GAFsB,E,0CAOpC,WACC,OACC,cAAC,IAAD,UACC,cAAC,IAAD,UAIC,cAAC,IAAD,CAAOP,KAAK,IAAIqE,UAAW0B,Y,GAfdnB,aCJH+C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCLRQ,EAAsB,CACxBrC,KAAM,CACFC,eAAgB,CACZ,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,MAIlB5F,iBAAkB,CACdL,UAAW,GACXC,KAAM,IAEVgF,WAAY,CACR7E,KAAM,GACNH,KAAM,KAkDRqI,GAAiBC,YAAgB,CACnCvC,KA/CgB,WAAyD,IAAxDxF,EAAuD,uDAAhC6H,EAAUrC,KAAMwC,EAAgB,uCACxE,GAAIA,EAAOtI,OAASN,EAA4B,CAC5C,IAAQqC,EAAeuG,EAAfvG,KAAMhC,EAASuI,EAATvI,KACNgG,EAAmBzF,EAAnByF,eASR,OAHAA,EAAe1C,KAAK,CAACtB,EAAMhC,IAC3BwI,QAAQC,IAAIzC,GAEL,2BACAzF,GADP,IAEIyF,eAAe,YAAKA,KAG5B,OAAOzF,GA+BPH,iBA5B4B,WAAiF,IAAhFG,EAA+E,uDAA5C6H,EAAUhI,iBAAkBmI,EAAgB,uCAC5G,GAAIA,EAAOtI,OAASL,EAAwB,CACxC,IAAQG,EAAoBwI,EAApBxI,UAAWC,EAASuI,EAATvI,KAEnB,OAAO,2BACAO,GADP,IAEIR,YACAC,SAGR,OAAOO,GAmBPyE,WAhBsB,WAAqE,IAApEzE,EAAmE,uDAAtC6H,EAAUpD,WAAYuD,EAAgB,uCAC1F,GAAIA,EAAOtI,OAASJ,EAAmB,CACnC,IAAQM,EAAeoI,EAAfpI,KAAMH,EAASuI,EAATvI,KAEd,OAAO,2BACAO,GADP,IAEIJ,OACAH,SAGR,OAAOO,KAYImI,GAJC,WAA8C,IAA7CnI,EAA4C,uDAA1B6H,EAAWG,EAAe,uCACnDI,EAAmBN,GAAe9H,EAAOgI,GAC/C,OAAOI,GCrEXC,IAAS7G,OACP,cAAC,IAAM8G,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOC,YAAYL,IAA7B,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.1de870d7.chunk.js","sourcesContent":["/**\r\n * \t\r\n * @returns 增加图标\r\n */\r\nexport const AddIcon = () => (\r\n\t<svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\">\r\n\t\t<path d=\"M939.939489 459.072557 562.339502 459.072557 562.339502 83.519182 462.055494 83.519182 462.055494 459.072557 84.455507 459.072557 84.455507 559.356564 462.055494 559.356564 462.055494 939.003164 562.339502 939.003164 562.339502 559.356564 939.939489 559.356564Z\" fill=\"#e6e6e6\"/>\r\n\t</svg>\r\n)\r\n\r\n/**\r\n * \t\r\n * @returns 保存图标\r\n */\r\nexport const SaveIcon = () => (\r\n\t<svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\">\r\n\t\t<path d=\"M896 960a64 64 0 0 0 64-64V302.72L721.28 64H128a64 64 0 0 0-64 64v768a64 64 0 0 0 64 64h768m0 64H128a128 128 0 0 1-128-128V128a128 128 0 0 1 128-128h620.16L1024 275.84V896a128 128 0 0 1-128 128z\" fill=\"#ffffff\"/>\r\n\t\t<path d=\"M768 448h-64a64 64 0 0 1-64-64V320a64 64 0 0 1 64-64h64a64 64 0 0 1 64 64v64a64 64 0 0 1-64 64z m-64-128v64h64V320z m0-32V320z\" fill=\"#ffffff\"/>\r\n\t\t<path d=\"M832 1024H192a64 64 0 0 1-64-64v-320a64 64 0 0 1 64-64h640a64 64 0 0 1 64 64v320a64 64 0 0 1-64 64zM192 640v320h640v-320z m0-32v32z\" fill=\"#ffffff\"/>\r\n\t\t<path d=\"M448 448H192a64 64 0 0 1-64-64V64a64 64 0 0 1 64-64h256a64 64 0 0 1 64 64v320a64 64 0 0 1-64 64zM192 64v320h256V64z m0-32V64z\" fill=\"#ffffff\"/>\r\n\t</svg>\r\n)\r\n/**\r\n * \t\r\n * @returns 更新图标\r\n */\r\nexport const UpdateIcon = () => (\r\n\t<svg viewBox=\"0 0 1024 1024\"  width=\"1em\" height=\"1em\">\r\n\t\t<path d=\"M120.407 499.198c0-0.394-0.124-0.769-0.124-1.17h0.09c7.624-208.962 178.952-376.166 389.778-376.166 85.346 0 163.789 28.005 227.954 74.52l-60.298 58.662 0.345 0.375c-6.368 7.472-10.37 17.054-10.37 27.684 0 23.736 19.259 42.962 42.984 42.962h36.143l0.029 0.028 0.03-0.028h164.428c23.725 0 42.982-19.231 42.982-42.962V82.46c0-23.735-19.257-42.962-42.982-42.962-18.117 0-33.535 11.235-39.873 27.05l-53.075 51.62C733.441 51.3 626.767 10.803 510.151 10.803c-262.24 0-476.416 201.595-498.569 458.106-1.722 4.643-2.981 9.542-2.981 14.813 0 1.833 0.602 3.468 1.032 5.19-0.602 3.356-1.032 6.765-1.032 10.286 0 30.9 25.022 55.915 55.915 55.915 30.869 0 55.891-25.015 55.891-55.915z m891.292 7.167c0-2.089-0.4-4.074-0.602-6.107-0.035-0.714-0.09-1.46-0.117-2.207h-0.112c-4.039-26.882-27.026-47.574-55.057-47.574-28.06 0-51.047 20.725-55.087 47.574h-0.797c0.055 1.777 0.14 3.554 0.284 5.36-0.055 1.003-0.316 1.949-0.316 2.983 0 2.406 0.433 4.668 0.688 6.992-0.578 215.204-175.082 389.49-390.437 389.49-85.525 0-164.016-28.146-228.193-74.89l55.918-55.484c8.744-7.622 14.642-18.255 14.642-30.866 0-23.728-19.259-42.994-42.986-42.994h-35.823l-1.092-1.086-1.085 1.086H108.91c-23.734 0-42.988 19.266-42.988 42.994v200.618c0 23.729 19.254 42.986 42.988 42.986 3.12 0 5.88-1.14 8.828-1.77l0.117 1.77 2.207-2.26c11.118-3.043 20.09-10.204 25.562-19.856l57.121-56.634c84.804 66.749 190.994 107.412 307.408 107.412 276.966 0 501.52-224.52 501.547-501.49v-0.054c0-1.35-0.14-2.67-0.2-3.99 0.026-0.69 0.198-1.312 0.198-2.003z m0 0\" fill=\"#ffffff\"/>\r\n\t</svg>\r\n)\r\n/**\r\n * \t\r\n * @returns 字典图标\r\n */\r\nexport const DictionaryIcon = (props: any) => (\r\n\t<svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\">\r\n\t\t<path d=\"M966.633 253.603c-18.851 0-34.118 15.267-34.118 34.094v537.95H602.927A123.136 123.136 0 0 0 512 866.048a123.183 123.183 0 0 0-90.927-40.401H91.485v-537.95a34.118 34.118 0 0 0-68.189 0V837.33c0 32.21 25.46 58.415 56.785 58.415h340.992c24.274 0 45.01 15.71 53.155 37.748 4.678 12.66 17.176 20.69 30.674 20.69h14.196c13.498 0 25.996-8.03 30.674-20.69 8.145-22.039 28.881-37.748 53.155-37.748h340.968c31.349 0 56.832-26.205 56.832-58.415V287.697c0-18.827-15.267-34.094-34.094-34.094zM221.23 139.939h199.842c31.326 0 56.832 21.574 56.832 48.105v493.614a130.444 130.444 0 0 0-56.832-12.8H221.231v-528.92z m254.464 635.229l2.21 24.413h68.19l2.187-24.413c6.61-21.318 29.091-36.212 54.645-36.212h268.055V522.822a34.118 34.118 0 0 0-68.19 0v146.036H602.928c-20.387 0-39.727 4.538-56.832 12.8V188.044c0-26.531 25.483-48.105 56.832-48.105h199.842v244.876a34.095 34.095 0 0 0 68.213 0V116.364a46.545 46.545 0 0 0-46.546-46.546h-221.51c-35.84 0-68.119 14.406-90.926 37.33a128 128 0 0 0-90.927-37.33h-221.51a46.545 46.545 0 0 0-46.545 46.546v622.592h268.055c25.554 0 48.035 14.894 54.622 36.212z\" fill={props.fill}/>\r\n\t</svg>\r\n)\r\n/**\r\n * \r\n * @returns 标签图标\r\n */\r\nexport const LabelIcon = () => (\r\n\t<svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\">\r\n\t\t<path d=\"M482.729 789.529l377.83-377.931a7.897 7.897 0 0 0 2.298-6.294l-25.475-301.106a16.02 16.02 0 0 0-14.586-14.586L521.691 64.237c-2.298-0.2-4.696 0.6-6.294 2.298L137.566 444.366c-3.097 3.097-3.097 8.192 0 11.289L471.44 789.529a7.843 7.843 0 0 0 11.289 0z m62.539-651.064l224.38 18.981 18.982 224.381-311.596 311.496L233.672 450.06l311.596-311.595z m60.1 186.044a47.953 47.953 0 1 0 67.814-67.817 47.953 47.953 0 1 0-67.814 67.817z m283.464 214.764l-39.561-39.461c-3.097-3.097-8.192-3.097-11.29 0L476.336 860.759 238.967 623.991c-3.097-3.097-8.192-3.097-11.29 0l-39.56 39.461c-3.098 3.097-3.098 8.192 0 11.29l242.962 242.562 39.561 39.462c3.097 3.097 8.192 3.097 11.29 0l406.902-406.204c3.097-3.097 3.097-8.192 0-11.289z\" fill=\"#ffffff\"/>\r\n\t</svg>\r\n)\r\n\r\n\r\n/**\r\n * \r\n * @returns 设置图标\r\n */\r\nexport const SettingIcon = (props: any) => (\r\n\t<svg viewBox=\"0 0 1024 1024\" width=\"1em\" height=\"1em\">\r\n\t\t<path d=\"M999.327304 629.365605c-45.555661-19.322766-77.546995-64.494531-77.546996-117.088285s31.991335-97.765519 77.546996-117.088285c19.322766-8.189782 29.559993-29.815924 23.161726-49.650552-7.549955-22.905796-16.507529-45.171765-26.872721-66.669941-8.957574-18.682939-31.351508-27.896444-50.546309-19.962593-46.067522 18.93887-100.964652 9.853331-138.458497-27.640513-38.261636-38.261636-46.963279-94.822316-26.360859-141.529665 8.573678-19.322766 1.023723-42.228562-17.659217-52.081893-26.616791-14.076187-54.6412-25.976964-83.689332-35.446399-19.962593-6.526232-41.46077 3.83896-49.650551 23.161726-19.322766 45.683626-64.494531 77.674961-117.216251 77.674961-52.72172 0-97.893484-32.1193-117.216251-77.802926-7.933851-19.450732-29.432028-29.815924-49.39462-23.289692-27.000687 8.829608-53.105616 19.706662-78.058857 32.503196-18.171078 9.34147-27.256617 31.223543-19.962593 50.290379 17.275321 45.29973 7.67792 98.533311-28.920167 135.131397-36.470122 36.470122-89.447772 46.067522-134.747502 29.048132-19.066836-7.166059-40.948908 2.047445-50.162412 20.346489-12.412638 24.185449-23.033761 49.650552-31.607439 76.011412-6.526232 19.962593 3.710995 41.588735 23.161726 49.906482 45.555661 19.322766 77.546995 64.494531 77.546996 117.088285s-31.991335 97.765519-77.546996 117.088285C5.804412 637.555387-4.56078 659.181529 1.965452 679.272087c8.573678 26.36086 19.194801 51.825962 31.607439 76.267343 9.213504 18.171078 30.967612 27.512548 50.162412 20.346488 45.29973-17.147355 98.27738-7.42199 134.747502 29.048132 36.598087 36.598087 46.067522 89.703703 28.920167 135.131398-7.42199 19.706662 2.687272 41.46077 21.498177 50.930205 23.673588 12.028742 48.242933 22.393934 73.836001 30.839647 20.730385 6.910128 43.38025-3.199133 51.442066-23.545622 18.682939-46.963279 64.494531-80.106302 118.112008-80.106303s99.429068 33.143023 118.112008 80.106303c8.061816 20.346489 30.711681 30.455751 51.442066 23.545622 18.427009-6.142336 36.342156-13.18043 53.745442-21.242246 19.322766-8.829608 29.815924-30.839647 22.265969-50.546309-17.147355-45.29973-7.67792-98.533311 28.920167-135.003433 38.645532-38.645532 96.10197-47.21921 142.937283-25.593068 19.066836 8.829608 41.972631 1.407619 52.209859-16.891424 16.379563-29.432028 29.943889-60.655571 40.565012-93.158767 6.526232-20.218524-3.83896-41.844666-23.161726-50.034448zM512.163258 685.926285c-95.718074 0-174.032861-78.314787-174.032861-174.032861s78.314787-174.032861 174.032861-174.032861 174.032861 78.314787 174.032861 174.032861-78.314787 174.032861-174.032861 174.032861z\" fill={props.fill || \"#ffffff\"} />\r\n\t</svg>\r\n)","/**\r\n * 上传新的字典数据\r\n */\r\nexport const UPLOAD_NEW_DICTIONARY_DATA = 'UPLOAD_NEW_DICTIONARY_DATA'\r\n\r\n/**\r\n * 更新字典数据\r\n */\r\nexport const UPDATE_DICTIONARY_DATA = 'UPDATE_DICTIONARY_DATA'\r\n\r\n/**\r\n * 更新当前字典数据的文件路径\r\n */\r\n// export const UPDATE_DICTIONARY_DATA_PATH = 'UPDATE_DICTIONARY_DATA_PATH'\r\n\r\n/**\r\n * 更新语料数据\r\n */\r\nexport const UPDATE_TEXTS_DATA = 'UPDATE_TEXTS_DATA'","import {\r\n    UPDATE_DICTIONARY_DATA,\r\n    UPDATE_TEXTS_DATA,\r\n    UPLOAD_NEW_DICTIONARY_DATA\r\n} from '../types/actionTypes'\r\nimport { TableDataType, TextsDataType } from '../types/propsTypes'\r\n\r\n/**\r\n * 上传新的字典数据\r\n */\r\nexport const uploadNewDictionaryData = (name: string, path: string) => ({\r\n    type: UPLOAD_NEW_DICTIONARY_DATA,\r\n    name,\r\n    path\r\n})\r\n\r\n/**\r\n * 更新字典数据\r\n */\r\nexport const updateDictionaryData = (tableData: TableDataType, path: string) => ({\r\n    type: UPDATE_DICTIONARY_DATA,\r\n    tableData,\r\n    path\r\n})\r\n\r\n/**\r\n * 更新语料数据\r\n */\r\nexport const updateTextsData = (data: TextsDataType, path: string) => ({\r\n    type: UPDATE_TEXTS_DATA,\r\n    data,\r\n    path\r\n})\r\n\r\n/**\r\n * \r\n */\r\n// export const updateDictionaryDataPath","import { PlusOutlined, ExclamationCircleOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport { Table, Input, Tag, Button, Modal } from 'antd';\r\nimport React, { Component } from 'react';\r\nimport Icon from '@ant-design/icons';\r\nimport { SAVE_DICTIONARY_DATA, UPLOAD_DICTIONARY_DATA } from '../types/ipc';\r\nimport { AddIcon, SaveIcon, UpdateIcon } from './Icon'\r\nimport { connect } from 'react-redux';\r\nimport { updateDictionaryData } from '../action'\r\nimport { DictionaryWindowStoreType, StoreType, TableDataType } from '../types/propsTypes';\r\n\r\ninterface DictionaryWindowProps extends DictionaryWindowStoreType {\r\n  updateDictionaryData: typeof updateDictionaryData,\r\n  match: any\r\n}\r\ninterface DictionaryWindowState {\r\n  pageSize: number,\r\n  tableData: TableDataType,\r\n  inputNameByShow: string,\r\n  inputVisibleName: string,\r\n  path: string\r\n}\r\n\r\n\r\n// const { ipcRenderer } = (window as any).electron\r\n\r\n\r\nclass DictionaryWindow extends Component<DictionaryWindowProps, DictionaryWindowState>{\r\n  private nameInput: any\r\n  private input: any\r\n  public constructor(props: DictionaryWindowProps) {\r\n    super(props)\r\n    this.state = {\r\n      pageSize: 10,\r\n      tableData: [],\r\n      inputNameByShow: '',\r\n      inputVisibleName: '',\r\n      path: ''\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { Column } = Table;\r\n    // const { ipcRenderer } = (window as any).electron\r\n    const { pageSize, inputNameByShow, inputVisibleName } = this.state\r\n    const { tableData, path, updateDictionaryData } = this.props\r\n    // console.log(path)\r\n    tableData.forEach((value: { name: string; label: string; key?: string | undefined; abbreviations: string[]; }, index: number) => {\r\n      value['key'] = '' + index\r\n    })\r\n    // console.log('object');\r\n    return (\r\n      <div style={{\r\n        width: '100%',\r\n        // height: '475px',\r\n        padding: '0px 2%',\r\n        position: 'relative'\r\n        // backgroundColor: '#fafafa',\r\n        // backgroundColor: 'red'\r\n      }}>\r\n        <Table dataSource={tableData} size='small'\r\n          scroll={{ y: 420 }}\r\n          pagination={{\r\n            pageSize,\r\n            position: ['topRight'],\r\n            showSizeChanger: true,\r\n            onChange: (page: number, pageSize?: number) => {\r\n              this.setState({ pageSize: (pageSize as number) })\r\n              // console.log('page:', page, 'pageSize:', pageSize)\r\n            }\r\n          }}\r\n        >\r\n          <Column title=\"名称\" dataIndex=\"name\" key=\"name\" width='15%'\r\n            render={\r\n              (name: string, r: unknown, i: number) => {\r\n                return (\r\n                  inputNameByShow !== name ?\r\n                    <div onMouseEnter={\r\n                      () => {\r\n                        this.setState({ inputNameByShow: name }, () => {\r\n                          this.nameInput.focus()\r\n                        })\r\n                      }\r\n                    }>\r\n                      {name}\r\n                    </div> :\r\n                    <Input\r\n                      ref={\r\n                        (input) => {\r\n                          this.nameInput = input\r\n                        }\r\n                      }\r\n                      type=\"text\"\r\n                      size=\"small\"\r\n                      placeholder={name}\r\n                      style={{ width: 70 }}\r\n                      onBlur={\t// 失去焦点保存\r\n                        (e) => {\r\n                          this.setState({ inputNameByShow: '' })\r\n                          if (!e.target.value) return;\r\n                          tableData[i]['name'] = e.target.value\r\n                          updateDictionaryData(tableData, path)\r\n                          // this.setState({ tableData })\r\n                        }\r\n                      }\r\n                      onPressEnter={\t// 键盘确定保存\r\n                        (e) => {\r\n                          this.setState({ inputNameByShow: '' })\r\n                          if (!(e.target as any).value) return;\r\n                          tableData[i]['name'] = (e.target as any).value\r\n                          updateDictionaryData(tableData, path)\r\n                          // this.setState({ tableData })\r\n                        }\r\n                      }\r\n                    />\r\n\r\n                )\r\n              }\r\n            }\r\n          />\r\n          <Column width='75%'\r\n            title=\"别名\"\r\n            dataIndex=\"abbreviations\"\r\n            key=\"abbreviations\"\r\n            render={\r\n              (abbreviations, record: {\r\n                name: string,\r\n                label: string,\r\n                key: string,\r\n                abbreviations: Array<string>\r\n              }, i: number) => (\r\n                <>\r\n                  {\r\n                    abbreviations.map((abbreviation: string) => (\r\n                      <Tag closable color=\"blue\" key={abbreviation} onClose={\r\n                        (e) => {\r\n                          e.preventDefault()\r\n                          const newNames: Array<string> = abbreviations.filter((name: string) => name !== abbreviation)\r\n                          tableData[i]['abbreviations'] = [...newNames]\r\n                          updateDictionaryData([...tableData], path)\r\n                          // this.setState({ tableData })\r\n                        }\r\n                      }>\r\n                        {abbreviation}\r\n                      </Tag>\r\n                    ))\r\n                  }\r\n                  {\r\n                    'label' + i === inputVisibleName && (\r\n                      <Input\r\n                        ref={\r\n                          (input) => {\r\n                            this.input = input\r\n                          }\r\n                        }\r\n                        type=\"text\"\r\n                        size=\"small\"\r\n                        style={{ width: 78 }}\r\n                        onBlur={\r\n                          (e) => {\r\n                            // console.log(record, i);\r\n                            this.setState({ inputVisibleName: '' })\r\n                            if (!e.target.value) return;\r\n                            tableData[parseInt(record['key'])]['abbreviations'].push(e.target.value)\r\n                            updateDictionaryData(tableData, path)\r\n                            // this.setState({ tableData })\r\n                          }\r\n                        }\r\n                        onPressEnter={\r\n                          (e) => {\r\n                            this.setState({ inputVisibleName: '' })\r\n                            if (!(e.target as any).value) return;\r\n                            tableData[i]['abbreviations'].push((e.target as any).value)\r\n                            updateDictionaryData(tableData, path)\r\n                            // this.setState({ tableData })\r\n                          }\r\n                        }\r\n                      />\r\n                    )\r\n                  }\r\n                  {\r\n                    'label' + i !== inputVisibleName &&\r\n                    <Tag className=\"site-tag-plus\" onClick={\r\n                      () => {\r\n                        this.setState({ inputVisibleName: 'label' + i }, () => {\r\n                          (this.input as any).focus();\r\n                        })\r\n                      }\r\n                    }>\r\n                      <PlusOutlined /> 添加别名\r\n                    </Tag>\r\n                  }\r\n                </>\r\n              )\r\n            }\r\n          />\r\n          <Column title=\"操作\" dataIndex=\"name\" key=\"action\"\r\n            render={\r\n              (name: any, r: unknown, i: number) => {\r\n                return (\r\n                  <Button size='small' type='primary' onClick={\r\n                    () => {\r\n                      Modal.confirm({\r\n                        title: '警告',\r\n                        icon: <ExclamationCircleOutlined />,\r\n                        content: '请确认是否要删除 ' + name + ' 的别名字典',\r\n                        okText: '确认',\r\n                        cancelText: '取消',\r\n                        onOk: () => {\r\n                          tableData.splice(i, 1)\r\n                          updateDictionaryData([...tableData], path)\r\n                          // this.setState({ tableData: [...tableData] })\r\n                        }\r\n                      });\r\n                    }\r\n                  } icon={<DeleteOutlined />} >\r\n                    删除\r\n                  </Button>\r\n                )\r\n              }\r\n            }\r\n          />\r\n        </Table>\r\n        <Button type=\"primary\" size='middle' icon={\r\n          <Icon component={SaveIcon} />\r\n        } style={{\r\n          position: 'absolute',\r\n          top: 10\r\n        }} onClick={\r\n          () => {\r\n            // this.saveFile(path)\r\n          }\r\n        }>\r\n          保存\r\n        </Button>\r\n        <Button type=\"primary\" size='middle' icon={\r\n          <Icon component={SaveIcon} />\r\n        } style={{\r\n          position: 'absolute',\r\n          top: 10,\r\n          left: 110 - 5\r\n        }} onClick={\r\n          () => {\r\n            // const { message, path } = ipcRenderer.sendSync(SAVE_DICTIONARY_DATA)\r\n            // if (message === 'success') {\r\n            //   this.saveFile(path)\r\n            // } else {\r\n\r\n            // }\r\n          }\r\n        }>\r\n          另存为\r\n        </Button>\r\n        <Button icon={<Icon component={UpdateIcon} />} type=\"primary\"\r\n          style={{\r\n            position: 'absolute',\r\n            top: 10,\r\n            left: 210 - 5\r\n          }}\r\n          onClick={\r\n            () => {\r\n            }\r\n          }>\r\n          更换字典\r\n        </Button>\r\n        <Button size='middle' type='primary' icon={<Icon component={AddIcon} />} onClick={\r\n            () => {\r\n              tableData.unshift({\r\n                key: '00',\r\n                name: '',\r\n                label: tableData.length ? tableData[0]['label'] : '',\r\n                abbreviations: []\r\n              })\r\n              // // console.log('data')\r\n              // this.setState({ inputNameByShow: '0' })\r\n              updateDictionaryData([...tableData], path)\r\n            }\r\n          } style={{\r\n            position: 'absolute',\r\n            top: 10,\r\n            left: 320\r\n          }}>\r\n            增加字典\r\n          </Button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  public componentDidMount() {\r\n    // \r\n    \r\n  }\r\n\r\n  private saveFile(path: string) : void {\r\n    // const { tableData, updateDictionaryData } = this.props\r\n    // const configData = [{\r\n    //     name: '字典',\r\n    //     data: [\r\n    //         ['标签', '全称', '别名']\r\n    //     ]\r\n    // }]\r\n    // tableData.forEach((value) => {\r\n    //     configData[0]['data'].push([\r\n    //         value['label'], value['name'], ...value['abbreviations']\r\n    //     ])\r\n    // })\r\n    // const buffer = (window as any).xlsx.build(configData);\r\n    // (window as any).fs.writeFile(path, buffer, (err: any) => {\r\n    //   if (err) {\r\n\r\n    //   }\r\n    //   updateDictionaryData(tableData, path)\r\n    // })\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state:StoreType, ownProps?: any) => {\r\n\tconst { DictionaryWindow } = state\r\n\t// console.log(Header)\r\n\treturn {\r\n\t\t\t...ownProps,\r\n\t\t\t...DictionaryWindow,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  updateDictionaryData\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DictionaryWindow);","import React, { Component } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Button, Modal, Table, Input, message } from 'antd';\r\nimport { ExclamationCircleOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport Icon from '@ant-design/icons';\r\nimport { AddIcon, LabelIcon, SaveIcon, UpdateIcon } from './Icon';\r\nimport { UPLOAD_TEXTS_DATA } from '../types/ipc';\r\nimport { connect } from 'react-redux';\r\nimport { StoreType, TextWindowStoreType } from '../types/propsTypes';\r\nimport { updateTextsData } from '../action';\r\n\r\ninterface TextWindowProps extends TextWindowStoreType {\r\n  updateTextsData: typeof updateTextsData,\r\n}\r\ninterface TextWindowState {\r\n  editKey: string,\r\n  data: Array<{\r\n    key?: string,\r\n    text: string,\r\n    label: Array<{\r\n      start: number,\r\n      end: number,\r\n      label: string\r\n    }>\r\n  }>,\r\n  pageSize: number,\r\n}\r\n\r\n// const { ipcRenderer } = (window as any).electron\r\n\r\n\r\nclass TextWindow extends Component<TextWindowProps, TextWindowState>{\r\n  private columns: any\r\n  public constructor(props: TextWindowProps) {\r\n    super(props)\r\n    this.state = {\r\n      editKey: '',\r\n      data: [\r\n        {\r\n          key: '1',\r\n          text: 'dsoajmfosamfosao',\r\n          label: []\r\n        }, {\r\n          key: '2',\r\n          text: 'gewgvwev',\r\n          label: []\r\n        }, {\r\n          key: '3',\r\n          text: 'vdscas',\r\n          label: []\r\n        }, {\r\n          key: '1',\r\n          text: 'dsoajmfosamfosao',\r\n          label: []\r\n        }, {\r\n          key: '4',\r\n          text: 'dsoajmfosamfosao',\r\n          label: []\r\n        }, {\r\n          key: '5',\r\n          text: 'dsoajmfosamfosao',\r\n          label: []\r\n        },\r\n      ],\r\n      pageSize: 5\r\n    }\r\n    this.columns = [\r\n      {\r\n        title: <div style={{\r\n          width: '100%',\r\n          textAlign: 'center'\r\n        }}>\r\n          文本\r\n        </div>,\r\n        dataIndex: 'text',\r\n        key: 'text',\r\n        width: '70%',\r\n        // ellipsis: true,\r\n        align: 'left',\r\n        render: (text: string, record: { key?: string, text: string, label: any }, index: number) => {\r\n          const { TextArea } = Input\r\n          const { editKey } = this.state\r\n          return editKey !== record['key'] ?\r\n            <div>\r\n              {text}\r\n            </div> :\r\n            <TextArea\r\n              value={text}\r\n              onChange={\r\n                (e) => {\r\n                  const newText = e.target.value\r\n                  const { data: originalData, path, updateTextsData } = this.props\r\n                  const data = originalData.map((value: { key?: string; text: string; label: any; }) => {\r\n                    if (value['key'] !== record['key']) return value;\r\n                    return {\r\n                      ...value,\r\n                      text: newText\r\n                    }\r\n                  })\r\n                  updateTextsData(data, path)\r\n                }\r\n              }\r\n              autoSize\r\n            />\r\n        }\r\n      }, {\r\n        title: '操作',\r\n        dataIndex: 'kind',\r\n        render: (label: string, record: { key: string, text: string, label: any }, index: number) => (\r\n          <React.Fragment>\r\n            <Button size='small' type='primary' onClick={\r\n              () => {\r\n                const editKey: string = this.state.editKey === record['key'] ? '' : record['key']\r\n                this.setState({ editKey })\r\n              }\r\n            } style={{\r\n              // float: 'right',\r\n              marginRight: '10px'\r\n            }}>\r\n              {this.state.editKey === record['key'] ? '保存' : '编辑'}\r\n            </Button>\r\n            <Button size='small' type='primary' \r\n              icon={<Icon component={LabelIcon} />}\r\n              onClick={\r\n                () => {\r\n                  \r\n                }\r\n              } style={{\r\n              // float: 'right',\r\n              marginRight: '10px'\r\n            }}>\r\n              标注\r\n            </Button>\r\n            <Button size='small' type='primary' onClick={\r\n              () => {\r\n                const { data, path, updateTextsData } = this.props\r\n                Modal.confirm({\r\n                  title: '警告',\r\n                  icon: <ExclamationCircleOutlined />,\r\n                  content: '请确认是否要删除改文本',\r\n                  okText: '确认',\r\n                  cancelText: '取消',\r\n                  onOk: () => {\r\n                    updateTextsData(data.filter((value: any, i: number) => i !== index), path)\r\n                  }\r\n                });\r\n              }\r\n            } icon={<DeleteOutlined />} >\r\n              删除\r\n            </Button>\r\n          </React.Fragment>\r\n\r\n        ),\r\n        width: '30%',\r\n        align: 'center'\r\n      }\r\n    ]\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { pageSize } = this.state\r\n    const { data, path, updateTextsData } = this.props\r\n    data.forEach((value: { key?: string; text: string; label: any; }, index: number,) => {\r\n      value['key'] = '' + index\r\n    })\r\n    return (\r\n      <div style={{\r\n        width: '100%',\r\n        height: '475px',\r\n        padding: '0px 2%',\r\n        backgroundColor: '#fafafa',\r\n        position: 'relative'\r\n      }}>\r\n        <React.Fragment>\r\n\r\n          <Table columns={this.columns} dataSource={data} size='small'\r\n            scroll={{ y: 380 }}\r\n            pagination={{\r\n              pageSize,\r\n              position: ['topRight'],\r\n              showSizeChanger: true,\r\n              onChange: (page: number, pageSize?: number) => {\r\n                this.setState({ pageSize: (pageSize as number) })\r\n              }\r\n            }}\r\n          />\r\n          <Button type=\"primary\" size='middle' icon={\r\n            <Icon component={SaveIcon} />\r\n          } style={{\r\n            position: 'absolute',\r\n            top: 10\r\n          }} onClick={\r\n            () => {\r\n              this.saveFile(path)\r\n            }\r\n          }>\r\n            保存\r\n          </Button>\r\n          <Button type=\"primary\" size='middle' icon={\r\n            <Icon component={SaveIcon} />\r\n          } style={{\r\n            position: 'absolute',\r\n            top: 10,\r\n            left: 110 - 5\r\n          }} onClick={\r\n            () => {\r\n              // const { message, path } = ipcRenderer.sendSync(SAVE_DICTIONARY_DATA)\r\n              // if (message === 'success') {\r\n              //   this.saveFile(path)\r\n              // } else {\r\n\r\n              // }\r\n            }\r\n          }>\r\n            另存为\r\n          </Button>\r\n          <Button icon={<Icon component={UpdateIcon} />} type=\"primary\"\r\n            style={{\r\n              position: 'absolute',\r\n              top: 10,\r\n              left: 210 - 5\r\n            }}\r\n            onClick={\r\n              () => {\r\n                // this.uploadDictionaryData()\r\n              }\r\n            }>\r\n            更换字典\r\n          </Button>\r\n          <Button size='middle' type='primary' icon={<Icon component={AddIcon} />} onClick={\r\n            () => {\r\n              data.unshift({\r\n                key: '00',\r\n                text: '',\r\n                label: []\r\n              })\r\n              // console.log('data')\r\n              this.setState({ editKey: '0' })\r\n              updateTextsData([...data], path)\r\n            }\r\n          } style={{\r\n            position: 'absolute',\r\n            top: 10,\r\n            left: 320\r\n          }}>\r\n            增加文本\r\n          </Button>\r\n          \r\n        </React.Fragment>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  public componentDidMount() {\r\n\r\n  }\r\n\r\n\r\n\r\n  private saveFile(path: string) : void {\r\n    // const { data, updateTextsData } = this.props;\r\n    // let dataString = ''\r\n    // data.forEach((value: { key?: string | undefined; text: string; label: { start: number; end: number; label: string; }[]; }) => {\r\n    //   dataString += (value['text'] + '\\r\\n')\r\n    // })\r\n    // const fs = (window as any).fs;\r\n    // fs.writeFile(path, dataString, (err: any) => {\r\n    //   if (err) {\r\n\r\n    //   }\r\n    //   updateTextsData(data, path)\r\n    //   // console.log('success')\r\n    // })\r\n  }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: StoreType, ownProps?: any) => {\r\n  const { TextWindow } = state\r\n  // console.log(Header)\r\n  return {\r\n    ...ownProps,\r\n    ...TextWindow,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  updateTextsData\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TextWindow);","import React, { Component } from 'react';\r\nimport { Layout, Menu, Button } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { UploadOutlined, PlayCircleOutlined, FileTextOutlined } from '@ant-design/icons';\r\nimport Icon from '@ant-design/icons';\r\nimport {\r\n  // BrowserRouter as Router, \r\n  Route,\r\n  // Link,\r\n  Switch,\r\n} from 'react-router-dom'\r\n// import DictionaryView from './DictionaryView';\r\nimport { OPEN_MODEL_CONFIG_WINDOW, UPLOAD_DICTIONARY_DATA, UPLOAD_TEXTS_DATA } from '../types/ipc';\r\nimport { DictionaryIcon } from './Icon'\r\nimport { MainStoreType, StoreType, TextsDataType } from '../types/propsTypes';\r\nimport { connect } from 'react-redux';\r\nimport DictionaryWindow from './DictionaryWindow';\r\nimport { updateDictionaryData, updateTextsData } from '../action';\r\nimport TextWindow from './TextWindow';\r\nimport MarkView from './MarkView';\r\n\r\n\r\n// const { ipcRenderer } = (window as any).electron\r\n\r\n// import TextsView from './TextsView';\r\n\r\ninterface MainProps extends MainStoreType {\r\n  history: any,\r\n  updateDictionaryData: typeof updateDictionaryData,\r\n  updateTextsData: typeof updateTextsData,\r\n}\r\ninterface MainState {\r\n  dictionaryList: Array<[name: string, path: string]>\r\n  stringList: Array<[name: string, path: string]>,\r\n  openKeys: Array<string>,\r\n  selectedKeys: Array<string>,\r\n\r\n}\r\nclass Main extends Component<MainProps, MainState>{\r\n  public constructor(props: MainProps) {\r\n    super(props)\r\n    this.state = {\r\n      dictionaryList: [\r\n        // ['dict1', ''],\r\n        // ['dict2', ''],\r\n        // ['dict3', ''],\r\n        // ['dict4', ''],\r\n        // ['dict5', ''],\r\n      ],\r\n      stringList: [\r\n        // ['dict1', ''],\r\n        // ['dict2', ''],\r\n        // ['dict3', ''],\r\n        // ['dict4', ''],\r\n        // ['dict5', ''],\r\n      ],\r\n      openKeys: ['directory'],\r\n      selectedKeys: []\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { Header, Sider, Content } = Layout;\r\n    const { SubMenu } = Menu;\r\n    const { dictionaryList, stringList, openKeys, selectedKeys } = this.state\r\n    const { history } = this.props\r\n    // console.log('object:', openKeys, selectedKeys);\r\n    return (\r\n      <Layout>\r\n        <Sider trigger={null} theme=\"light\">\r\n          <div className=\"logo\" style={{\r\n            width: '100%',\r\n            height: '60px',\r\n            // marginLeft: '2%',\r\n            lineHeight: '60px',\r\n            textAlign: 'center',\r\n            fontSize: '24px',\r\n            fontWeight: 'bold',\r\n            color: 'rgb(13,110,253)',\r\n            userSelect: 'none'\r\n          }} onClick={\r\n            () => {\r\n              history.push('/')\r\n            }\r\n          }>\r\n            实体抽取工具\r\n          </div>\r\n          <Menu theme=\"light\" mode=\"inline\" openKeys={openKeys} selectedKeys={selectedKeys}>\r\n            <SubMenu key=\"dictionary\" title=\"字典数据\" icon={<Icon component={DictionaryIcon} />} onTitleClick={\r\n              (e) => {\r\n                // console.log(e);\r\n                this.setState({ openKeys: openKeys[0] === e.key ? [] : [e.key] })\r\n              }\r\n            }>\r\n              {\r\n                dictionaryList.map((value: [name: string, path: string], index: number) => (\r\n                  <Menu.Item key={'dictionary' + index} onClick={\r\n                    () => {\r\n                      // console.log(value[1].split('\\\\').join('_'));\r\n                      history.push('/dictionary')\r\n                      this.setState({ selectedKeys: ['dictionary' + index] })\r\n                      this.readXlsxFile(value[1])\r\n                    }\r\n                  }>\r\n                    {value[0]}\r\n                  </Menu.Item>\r\n                ))\r\n              }\r\n            </SubMenu>\r\n            <SubMenu key=\"text\" title=\"语料数据\" icon={<FileTextOutlined />} onTitleClick={\r\n              (e) => {\r\n\r\n                this.setState({ openKeys: openKeys[0] === e.key ? [] : [e.key] })\r\n              }\r\n            }>\r\n              {\r\n                stringList.map((value: [name: string, path: string], index: number) => (\r\n                  <Menu.Item key={'text' + index} onClick={\r\n                    () => {\r\n                      this.setState({ selectedKeys: ['text' + index] })\r\n                      history.push('/texts')\r\n                      this.readTxtFile(value[1])\r\n                      // console.log(value[1]);\r\n                      // ipcRenderer.send(OPEN_TEXT_WINDOW, { path: value[1].split('\\\\').join('_') })\r\n\r\n                    }\r\n                  }>\r\n                    {value[0]}\r\n                  </Menu.Item>\r\n                ))\r\n              }\r\n            </SubMenu>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout className=\"site-layout\">\r\n          <Header className=\"site-layout-background\" style={{ padding: 0, backgroundColor: 'white' }}>\r\n            <Button icon={<UploadOutlined />} onClick={\r\n              () => {\r\n                // const path: string = ipcRenderer.sendSync(UPLOAD_DICTIONARY_DATA)\r\n                // if (path === '') {\r\n                //   return;\r\n                // }\r\n                // history.push('/dictionary')\r\n                // dictionaryList.push([path.split('\\\\')[path.split('\\\\').length - 1], path])\r\n                // let index = dictionaryList.length - 1\r\n                // for (let i = 0; i < dictionaryList.length - 1; i++) {\r\n                //   if (dictionaryList[i][0] === path.split('\\\\').pop() && dictionaryList[i][1] === path) {\r\n                //     dictionaryList.pop()\r\n                //     index = i\r\n                //     break;\r\n                //   }\r\n                // }\r\n                // this.setState({ dictionaryList, openKeys: ['dictionary'], selectedKeys: ['dictionary' + index] })\r\n                // this.readXlsxFile(path)\r\n              }\r\n            }>\r\n              上传字典\r\n            </Button>\r\n            <Button icon={<UploadOutlined />} onClick={\r\n              () => {\r\n                history.push('/texts')\r\n                // const path: string = ipcRenderer.sendSync(UPLOAD_TEXTS_DATA)\r\n                // stringList.push([path.split('\\\\')[path.split('\\\\').length - 1], path])\r\n                // let index = stringList.length - 1\r\n                // for (let i = 0; i < stringList.length - 1; i++) {\r\n                //   if (stringList[i][0] === path.split('\\\\').pop() && stringList[i][1] === path) {\r\n                //     stringList.pop()\r\n                //     index = i\r\n                //     break;\r\n                //   }\r\n                // }\r\n                // this.setState({ stringList, openKeys: ['text'], selectedKeys: ['text' + index] })\r\n                // this.readTxtFile(path)\r\n              }\r\n            }>\r\n              上传语料\r\n            </Button>\r\n            <Button icon={<PlayCircleOutlined />} onClick={\r\n              () => {\r\n                // ipcRenderer.send(OPEN_MODEL_CONFIG_WINDOW)\r\n              }\r\n            }>\r\n              初始化\r\n            </Button>\r\n          </Header>\r\n          <Content className=\"site-layout-background\"\r\n            style={{\r\n              // margin: '24px 16px',\r\n              // padding: 24,\r\n              minHeight: 500,\r\n            }}\r\n          >\r\n            {/* <MarkView /> */}\r\n            <Switch>\r\n              <Route path=\"/dictionary\" component={DictionaryWindow} />\r\n              <Route path=\"/texts\" component={TextWindow}/>\r\n              {/* <Route path=\"/force-directed\" component={ForceDirectedView} exact/> */}\r\n            </Switch>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    \r\n  }\r\n\r\n  private readXlsxFile(path: string): void {\r\n    // document.title = path\r\n    // const dataFile = (window as any).xlsx.parse(path)\r\n    // const tableData = dataFile[0]['data'].slice(1).map((arr: Array<string>) => ({\r\n    //   label: arr[0],\r\n    //   name: arr[1],\r\n    //   abbreviations: [...arr.slice(2)]\r\n    // }))\r\n    // // console.log(tableData, path, dataFile);\r\n    // this.props.updateDictionaryData(tableData, path)\r\n  }\r\n\r\n  private readTxtFile(path: string): void {\r\n    // (window as any).fs.readFile(path, 'utf-8', (err: any, data: string) => {\r\n    //   if (err) {\r\n    //       throw(err)\r\n    //   }\r\n    //   const dataByHandle: TextsDataType = []\r\n    //   const lines = data.split(\"\\r\\n\")\r\n    //   lines.forEach((line) => {\r\n    //       dataByHandle.push({\r\n    //           text: line,\r\n    //           label: []\r\n    //       });\r\n    //   })\r\n    //   this.props.updateTextsData(dataByHandle, path)\r\n  // })  \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: StoreType, ownProps?: any) => {\r\n  const { Main } = state\r\n  // console.log()\r\n  return {\r\n    ...ownProps,\r\n    ...Main,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  updateDictionaryData,\r\n  updateTextsData\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React, { Component } from 'react';\r\nimport { \r\n\tBrowserRouter as Router, \r\n\tRoute, \r\n\tSwitch,\r\n} from 'react-router-dom'\r\nimport './App.css'\r\nimport Main from './components/Main'\r\n\r\n\r\n\r\n\r\ninterface AppProps {\r\n\r\n}\r\ninterface AppState {\r\n\r\n}\r\nclass App extends Component<AppProps, AppState>{\r\n\tpublic constructor(props: AppProps) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tpublic render(): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t{/* <Route path=\"/DictionaryWindow/:path\" component={DictionaryWindow} exact/>\r\n\t\t\t\t\t<Route path=\"/TextWindow/:path\" component={TextWindow} exact/>\r\n\t\t\t\t\t<Route path=\"/ModelConfigWindow\" component={ModelConfigWindow} exact/> */}\r\n\t\t\t\t\t<Route path=\"/\" component={Main}/>\r\n\t\t\t\t</Switch>\r\n\t\t\t\t\r\n\t\t\t\t{/* <Main /> */}\r\n\t\t\t</Router>\r\n\t\t)\r\n\t}\r\n\r\n\r\n}\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\r\nimport { UPDATE_DICTIONARY_DATA, UPDATE_TEXTS_DATA, UPLOAD_NEW_DICTIONARY_DATA } from '../types/actionTypes'\r\nimport { DictionaryWindowStoreType, MainStoreType, StoreType, TextWindowStoreType } from '../types/propsTypes'\r\n\r\nconst initStore:StoreType = {\r\n    Main: {\r\n        dictionaryList: [\r\n            ['dict1', ''],\r\n            ['dict2', ''],\r\n            ['dict3', ''],\r\n            ['dict4', ''],\r\n            ['dict5', ''],\r\n\r\n        ]\r\n    },\r\n    DictionaryWindow: {\r\n        tableData: [],\r\n        path: ''\r\n    },\r\n    TextWindow: {\r\n        data: [],\r\n        path: ''\r\n    }\r\n}\r\n\r\nconst MainReducer = (state: MainStoreType = initStore.Main, action: any) => {\r\n    if (action.type === UPLOAD_NEW_DICTIONARY_DATA) {\r\n        const { name, path } = action\r\n        const { dictionaryList } = state\r\n        // for (let i = 0; i< dictionaryList.length; i++) {\r\n        //     if (dictionaryList[i][1] === path) {\r\n                \r\n        //     }\r\n        // }\r\n        dictionaryList.push([name, path])\r\n        console.log(dictionaryList);\r\n\r\n        return {\r\n            ...state,\r\n            dictionaryList: [...dictionaryList]\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nconst DictionaryWindowReducer = (state: DictionaryWindowStoreType = initStore.DictionaryWindow, action: any) => {\r\n    if (action.type === UPDATE_DICTIONARY_DATA) {\r\n        const { tableData, path } = action\r\n        // console.log(path);\r\n        return {\r\n            ...state,\r\n            tableData,\r\n            path\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nconst TextWindowReducer = (state: TextWindowStoreType = initStore.TextWindow, action: any) => {\r\n    if (action.type === UPDATE_TEXTS_DATA) {\r\n        const { data, path } = action\r\n        // console.log(path);\r\n        return {\r\n            ...state,\r\n            data,\r\n            path\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nconst combineReducer = combineReducers({\r\n    Main: MainReducer,\r\n    DictionaryWindow: DictionaryWindowReducer,\r\n    TextWindow: TextWindowReducer\r\n})\r\nconst reducer = (state:StoreType = initStore, action:any) => {\r\n    const store1:StoreType = combineReducer(state, action)\r\n    return store1\r\n}\r\nexport default reducer\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux'\r\nimport reducer from './reducer'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={createStore(reducer)}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}